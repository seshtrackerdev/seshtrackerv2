---
description: API Documentation for the Kush.Observer <-> Sesh-Tracker.com Integration
globs: 
alwaysApply: false
---
# API Integration Rule

## SeshTracker API Integration Standards

When implementing or modifying SeshTracker integration endpoints, follow these guidelines:

### Authentication Integration

1. **JWT Token Management:**
   - Use 7-day expiration for SeshTracker-specific tokens
   - Use 2-hour expiration for standard user tokens
   - Always include token refresh mechanisms

2. **API Key Security:**
   - Never expose the SESH_TRACKER_API_KEY in client-side code
   - Always use the withSeshTrackerApiKey middleware for validation
   - Store API keys in environment variables, never in code

3. **Cross-Domain Authentication:**
   - Always implement proper CORS headers
   - Use the SeshTracker validation endpoints for token verification
   - Support silent token refresh mechanisms

### Endpoint Implementation

1. **Required Endpoints:**
   - `/api/auth/seshtracker/create-token` - For extended token creation
   - `/api/auth/seshtracker/validate-token` - For token validation
   - `/api/auth/seshtracker/demo-login` - For demo account access
   - `/api/seshtracker-integration` - For integration status

2. **Response Format Consistency:**
   - Always use the `{ success: boolean, ... }` response format
   - Include appropriate HTTP status codes
   - Provide detailed error messages for failures

3. **Error Handling:**
   - Implement comprehensive try/catch blocks
   - Log all errors with appropriate context
   - Return standardized error responses

### Client-Side Implementation

When implementing client-side code that interacts with the API:

1. **Use the `KushAuthClient` class** as demonstrated in the integration guide
2. **Implement proper token storage** in localStorage or secure cookies
3. **Create proper auth context providers** for React applications

### Code Examples

Follow these patterns:

```typescript
// Server-side endpoint (Hono.js)
router.post('/seshtracker/endpoint', withSeshTrackerApiKey, async (c) => {
  try {
    // Implementation
    return c.json({ success: true, data });
  } catch (error) {
    console.error('Error:', error);
    return c.json({ 
      success: false, 
      error: 'Error message',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, 500);
  }
});

// Client-side request
async function makeRequest() {
  try {
    const response = await fetch('https://kush.observer/api/auth/endpoint', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(data)
    });
    const result = await response.json();
    
    if (!result.success) {
      throw new Error(result.error || 'Request failed');
    }
    
    return result;
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
}
```

### Testing Requirements

All API integrations must be tested for:

1. Cross-domain functionality
2. Token validation and refresh
3. Error handling and recovery
4. Demo account access

Refer to `SeshTracker-Integration-Guide.md` for comprehensive implementation details.